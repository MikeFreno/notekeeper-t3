// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String     @id @default(cuid())
  username              String?
  email                 String     @unique
  timezone_Shift        Int?
  phone_number          String?
  receive_email         Boolean    @default(true)
  receive_SMS           Boolean    @default(false)
  receive_desktop       Boolean    @default(false)
  paid_user_type        String?    @default("not-paid")
  subscription_end_date String?    @default("")
  user_enabled_ads      Boolean    @default(false)
  user_task_order       String?
  user_reminder_order   String?
  Account               Account[]
  Session               Session[]
  Tasks                 Task[]
  Reminders             Reminder[]
}

model Task {
  id          String  @id @default(cuid())
  title       String
  description String
  completed   Boolean
  author      User    @relation(fields: [authorID], references: [id], onDelete: Cascade)
  authorID    String

  @@index([authorID])
}

model Reminder {
  id          String   @id @default(cuid())
  title       String
  description String
  completed   Boolean
  time        DateTime
  queued      Boolean
  author      User     @relation(fields: [authorID], references: [id], onDelete: Cascade)
  authorID    String

  @@index([authorID])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
